@using DABugTracker.Models.ViewModels;
@using Microsoft.AspNetCore.Identity
@using DABugTracker.Services.Interfaces
@using DABugTracker.Models.Enums

@inject SignInManager<BTUser> SignInManager
@inject UserManager<BTUser> UserManager
@inject IBTRolesService _roleService
@model DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
    @* Instantiate the btUser *@
    BTUser? user = await UserManager.GetUserAsync(User);
}

<!-- Start Content-->
<div class="container-fluid">
    <h1>Dashboard</h1>


    <div class="row">

        <div class="col-xl-3 col-md-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="header-title mt-0 mb-4">Tickets by Status</h4>
                    <div class="widget-chart-1">
                        <div class="widget-chart-box-1" dir="ltr">
                            <!-- ChartJS: Pie/Doughnut -->
                            <div class="">
                                <!--  Chart.js Canvas Tag -->
                                <canvas id="ticketStatusChart"></canvas>
                            </div>
                            <div class="widget-detail-1 text-end">
                                <h2 class="fw-normal pt-2 mb-1"> @Model.Tickets!.Where(p => p.Archived == false).Count()</h2>
                                <p class="text-muted mb-1">Active Tickets</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div><!-- end col -->
        </div>



        <div class="col-xl-3 col-md-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="header-title mt-0 mb-4">Total Tickets</h4>
                    <div class="widget-chart-1">
                        <div class="widget-chart-box-1" dir="ltr">
                            <!-- ChartJS: Pie/Doughnut -->
                            <div class="">
                                <!--  Chart.js Canvas Tag -->
                                <canvas id="totalTickets"></canvas>
                            </div>
                            <div class="widget-detail-1 text-end">
                                <h2 class="fw-normal pt-2 mb-1"> @Model.Tickets!.Count()</h2>
                                <p class="text-muted mb-1">Total Tickets</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div><!-- end col -->
        </div>
        
        <div class="col-xl-3 col-md-6">
            <div class="card">
                <div class="card-body">
                    <h4 class="header-title mt-0 mb-4">Unassigned Tickets</h4>
                    <div class="widget-chart-1">
                        <div class="widget-chart-box-1" dir="ltr">
                            <!-- ChartJS: Pie/Doughnut -->
                            <div class="">
                                <!--  Chart.js Canvas Tag -->
                                <canvas id="totalTickets"></canvas>
                            </div>
                            <div class="widget-detail-1 text-end">
                                <h2 class="fw-normal pt-2 mb-1"> @Model.Tickets!.Count()</h2>
                                <p class="text-muted mb-1">Unassigned Tickets</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div><!-- end col -->
        </div>












    </div>
    <!-- end row -->

    <div>
        <div classxfont-weighteighteightgetainer-fluid">
            <!-- Info Pills -->
            <div class="row mt-2">
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <a asp-controller="Projects" style="text-decoration:none">
                        <div class="card text-center bg-info">
                            <div class="body">
                                <div class="p-15 text-light">
                                    <h3>@Model.Projects!.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()</h3>
                                    <span>Active Projects</span>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <a asp-action="AllTickets" asp-controller="Tickets" style="text-decoration:none">
                        <div class="card text-center bg-secondary">
                            <div class="body">
                                <div class="p-15 text-light">
                                    <h3>@Model.Tickets!.Count()</h3>
                                    <span>Total Tickets</span>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <div class="card text-center bg-warning">
                        <div class="body">
                            <div class="p-15 text-light">
                                <h3>@Model.Tickets!.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
                                <span>Unassigned Tickets</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <div class="card text-center bg-dark">
                        <div class="body">
                            <div class="p-15 text-light">
                                <h3>
                                    @(
                                        Model.Projects!.Count()
                                        + Model.Tickets!.Count()
                                        + Model.Members!.Count()
                                        )
                                </h3>
                                <span>Total Data</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>




            <div class="row gy-2">
                <div class="cols mt-5 bg-secondary">
                    <div class="card col m-1 p-2">
                        <div class="card-body" style="height:600px;overflow-y:auto;">
                            <h5>Project: Tickets vs Developers</h5>
                            <p>[Plotly]</p>
                            <!-- HTML -->
                            <div id="plotlyChart"></div>
                        </div>
                    </div>
                </div>
            </div>





                        <div class="card col m-1 p-2">
                            <div class="card-body">
                                <h5>Chart 2</h5>
                                <p>[Projects]</p>
                            </div>
                        </div>
                        <div class="card col m-1 p-2">
                            <div class="card-body">
                                <h5>Chart 3</h5>
                                <p>[Tickets]</p>
                            </div>
                        </div>
                        <div class="card col m-1 p-2">
                            <div class="card-body">
                                <h5>Chart 4</h5>
                                <p>[Tickets]</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row gy-2">
                <div class="cols mt-5 bg-secondary">
                    <div class="card col m-1 p-2">
                        <div class="card-body" style="height:380px">
                            <h5>Chart 5</h5>
                            <p>[Projects: Tickets vs Developers]</p>
                        </div>
                    </div>
                </div>
            </div>
        <hr />
        <div class="mt-5 ">
            <div class="row">
                @* Projects Table *@
                <div class="col">
                    <div class="bg-secondary">
                        <div class="card m-1 p-2">
                            <div class="card-header">
                                <h2>Projects</h2>
                            </div>
                            <div class="card-body">
                                @* [Copy and format table from Unassigned Tickets] *@
                            </div>
                            <div class="card-footer">
                            </div>
                        </div>
                    </div>
                </div>
                @* Tickets Table *@
                <div class="col">
                    <div class="bg-secondary">
                        <div class="card m-1 p-2">
                            <div class="card-header">
                                <h2>Tickets</h2>
                            </div>
                            <div class="card-body">

                                @* Copy and format table from Unassigned Tickets *@
                            </div>
                            <div class="card-footer">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-2 ">
                    <div class="bg-dark">
                        <div class="card m-1 p-2">
                            <div class="card-header">
                                <h2>Members</h2>
                                <hr />
                            </div>
                            <div class="card-body" style="overflow-y:auto;height:600px;background-color:antiquewhite">
                                @* Looop over Company members. Display Name and Role *@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

@section scripts{



    <!-- *** Begin Chart JS Pie/Donut *** -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>

    @*Ticket Status Chart*@
    <script>

        var donutChartCanvas = $('#ticketStatusChart').get(0).getContext('2d');
        var donutData = {
            labels: [
                '@nameof(BTTicketStatuses.Development)',
                '@nameof(BTTicketStatuses.New)',
                '@nameof(BTTicketStatuses.Resolved)',
                '@nameof(BTTicketStatuses.Testing)'
            ],
            datasets: [
                {
                    data: [
        @Model.Tickets.Where(t=> t.TicketStatus!.Name == nameof(BTTicketStatuses.Development) && t.Archived == false).Count(),
        @Model.Tickets.Where(t=> t.TicketStatus!.Name ==nameof(BTTicketStatuses.New) && t.Archived == false).Count(),
        @Model.Tickets.Where(t=> t.TicketStatus!.Name ==nameof(BTTicketStatuses.Resolved) && t.Archived == false).Count(),
        @Model.Tickets.Where(t=> t.TicketStatus!.Name ==nameof(BTTicketStatuses.Testing) && t.Archived == false).Count()
                                            ],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)'
                    ]
                }
            ]
        };

        var donutOptions = {
            maintainAspectRatio: false,
            responsive: true,
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        new Chart(donutChartCanvas, {
            type: 'doughnut',
            data: donutData,
            options: donutOptions
        });
    </script>
    <!-- *** End Chart JS Donut *** -->




    @*Total Tickets Chart*@
    <script>

        var donutChartCanvas = $('#totalTickets').get(0).getContext('2d');
        var donutData = {
            labels: [
                'Active Tickets',
                'Archived Tickets'
            ],
            datasets: [
                {
                    data: [
        @Model.Tickets!.Where(p => p.Archived == false).Count(),
        @Model.Tickets!.Where(p => p.Archived == true).Count()
                                            ],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)'
                    ]
                }
            ]
        };

        var donutOptions = {
            maintainAspectRatio: false,
            responsive: true,
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        new Chart(donutChartCanvas, {
            type: 'doughnut',
            data: donutData,
            options: donutOptions
        });
    </script>
    <!-- *** End Chart JS Donut *** -->






    <!--  Plotly Charts  -->
    <!-- Load plotly.js into the DOM -->
    <script src='https://cdn.plot.ly/plotly-2.4.2.min.js'></script>
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/PlotlyBarChart",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var data = result;

                var layout = { barmode: 'group' };

                Plotly.newPlot('plotlyChart', data, layout);
            },
            failure: function (result) {
                alert(result.d);
            },
            error: function (result) {
                alert(result.d);
            }
        });
    </script>
    }
