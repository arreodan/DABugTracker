@using DABugTracker.Models.ViewModels;
@using Microsoft.AspNetCore.Identity
@using DABugTracker.Services.Interfaces
@using DABugTracker.Models.Enums
@using DABugTracker.Services

@inject SignInManager<BTUser> SignInManager
@inject UserManager<BTUser> UserManager
@inject IBTRolesService _roleService
@inject IBTProjectService _projectService
@inject IBTTicketService _ticketService
@model DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
    @* Instantiate the btUser *@
    BTUser? user = await UserManager.GetUserAsync(User);
}

<!-- Start Content-->
<div class="container-fluid">
    <h1>Dashboard</h1>


    <div class="row">

        <div class="col-xl-3 col-md-6">
            <div class="card  h-100">
                <div class="card-body">
                    <h4 class="header-title mt-0 mb-4">Tickets by Status</h4>
                    <div class="widget-chart-1">
                        <div class="widget-chart-box-1" dir="ltr">
                            <!-- ChartJS: Pie/Doughnut -->
                            <div class="">
                                <!--  Chart.js Canvas Tag -->
                                <canvas id="ticketStatusChart"></canvas>
                            </div>
                            <div class="widget-detail-1 text-end">
                                <h2 class="fw-normal pt-2 mb-1"> @Model.Tickets!.Where(p => p.Archived == false).Count()</h2>
                                <p class="text-muted mb-1">Active Tickets</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div><!-- end col -->

        <div class="col-xl-3 col-md-6">
            <div class="card  h-100">
                <div class="card-body">
                    <h4 class="header-title mt-0 mb-4">Total Tickets</h4>
                    <div class="widget-chart-1">
                        <div class="widget-chart-box-1" dir="ltr">
                            <!-- ChartJS: Pie/Doughnut -->
                            <div class="">
                                <!--  Chart.js Canvas Tag -->
                                <canvas id="totalTickets"></canvas>
                            </div>
                            <div class="widget-detail-1 text-end">
                                <h2 class="fw-normal pt-2 mb-1"> @Model.Tickets!.Count()</h2>
                                <p class="text-muted mb-1">Total Tickets</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div><!-- end col -->

        <div class="col-xl-3 col-md-6">
            <div class="card h-100">
                <div class="card-body ">
                    <h4 class="header-title mt-0 mb-3">Recent Projects</h4>
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead>
                                <tr>
                                    <th>Project Name</th>
                                    <th>PM</th>
                                    <th>Priority</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Project project in await _projectService.GetRecentProjectsAsync(user!.CompanyId))
                                {
                                    <tr>

                                        <td><a asp-action="details" asp-controller="Projects" asp-route-id="@project.Id">@project.Name</a></td>

                                        @if (await _projectService.GetProjectManagerAsync(project.Id, project.CompanyId) != null)
                                        {
                                            <td>
                                                @((await _projectService.GetProjectManagerAsync(project.Id, project.CompanyId))!.FullName)
                                            </td>
                                        }
                                        else
                                        {
                                            <td>
                                                Unassigned <a asp-controller="projects" asp-action="AssignPM" asp-route-id="@project.Id"><i class="bi bi-pencil-square"></i></a>
                                            </td>
                                        }


                                        @if (project.ProjectPriority!.Name == "Low")
                                        {
                                            <td><span class="badge bg-success">@project.ProjectPriority!.Name</span></td>
                                        }
                                        else if (project.ProjectPriority!.Name == "Medium")
                                        {
                                            <td><span class="badge bg-primary">@project.ProjectPriority!.Name</span></td>
                                        }
                                        else if (project.ProjectPriority!.Name == "High")
                                        {
                                            <td><span class="badge bg-warning">@project.ProjectPriority!.Name</span></td>
                                        }
                                        else if (project.ProjectPriority!.Name == "Urgent")
                                        {
                                            <td><span class="badge bg-danger">@project.ProjectPriority!.Name</span></td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div><!-- end col -->




        <div class="col-xl-3 col-md-6">
            <div class="card h-100">
                <div class="card-body ">
                    <h4 class="header-title mt-0 mb-3">Recent Projects</h4>
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead>
                                <tr>
                                    <th>Project</th>
                                    <th>Ticket Name</th>
                                    <th>Created Date</th>
                                    <th>Submitter</th>
                                    <th>Developer</th>
                                    <th>Priority</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Ticket ticket in await _ticketService.GetRecentTicketsAsync(user!.CompanyId))
                                {
                                    <tr>
                                        <td>@ticket.Project!.Name</td>
                                        <td>@ticket.Title</td>
                                        <td>@ticket.Created.ToString("dd MMMM yyyy")</td>
                                        <td>@ticket.SubmitterUser!.FullName</td>
                                        @if (ticket.DeveloperUserId == null)
                                        {
                                            <td><a asp-asp-controller="tickets" asp-action="assigndev" asp-route-id="@ticket.Id" class="btn btn-sm btn-outline-warning"> Unassigned</a></td>
                                        }
                                        else
                                        {
                                            <td>@ticket.DeveloperUser!.FullName</td>
                                        }

                                        @if (ticket.TicketPriority!.Name == "Low")
                                        {
                                            <td><span class="badge bg-success">@ticket.TicketPriority!.Name</span></td>
                                        }
                                        else if (ticket.TicketPriority!.Name == "Medium")
                                        {
                                            <td><span class="badge bg-primary">@ticket.TicketPriority!.Name</span></td>
                                        }
                                        else if (ticket.TicketPriority!.Name == "High")
                                        {
                                            <td><span class="badge bg-warning">@ticket.TicketPriority!.Name</span></td>
                                        }
                                        else if (ticket.TicketPriority!.Name == "Urgent")
                                        {
                                            <td><span class="badge bg-danger">@ticket.TicketPriority!.Name</span></td>
                                        }
                                        <td><a asp-action="Details" asp-route-id="@ticket.Id" class="btn btn-sm btn-soft-dark">Details</a></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div><!-- end col -->


    </div>
    <!-- end row -->





    <div class="row gy-2">
        <div class="cols mt-4">
            <div class="card h-100">
                <div class="card-body" style="height:600px;overflow-y:auto;">
                    <h5>Project: Tickets vs Developers</h5>
                    <!-- HTML -->
                    <div id="plotlyChart"></div>
                </div>
            </div>
        </div>
    </div>

            <div class="col-md-2 ">
                <div class="bg-dark">
                    <div class="card m-1 p-2">
                        <div class="card-header">
                            <h2>Members</h2>
                            <hr />
                        </div>
                        <div class="card-body" style="overflow-y:auto;height:600px;background-color:antiquewhite">
                            @* Looop over Company members. Display Name and Role *@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{



    <!-- *** Begin Chart JS Pie/Donut *** -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>

    @*Ticket Status Chart*@
    <script>

        var donutChartCanvas = $('#ticketStatusChart').get(0).getContext('2d');
        var donutData = {
            labels: [
                '@nameof(BTTicketStatuses.Development)',
                '@nameof(BTTicketStatuses.New)',
                '@nameof(BTTicketStatuses.Resolved)',
                '@nameof(BTTicketStatuses.Testing)'
            ],
            datasets: [
                {
                    data: [
        @Model.Tickets!.Where(t=> t.TicketStatus!.Name == nameof(BTTicketStatuses.Development) && t.Archived == false).Count(),
        @Model.Tickets!.Where(t=> t.TicketStatus!.Name ==nameof(BTTicketStatuses.New) && t.Archived == false).Count(),
        @Model.Tickets!.Where(t=> t.TicketStatus!.Name ==nameof(BTTicketStatuses.Resolved) && t.Archived == false).Count(),
        @Model.Tickets!.Where(t=> t.TicketStatus!.Name ==nameof(BTTicketStatuses.Testing) && t.Archived == false).Count()
                                                                                    ],
                    backgroundColor: [
                        'rgb(249 200 81)',
                        'rgb(113,182,249)',
                        'rgb(16,196,105)',
                        'RGB(255 91 91)'
                    ],
                    borderColor: [
                        'rgb(249 200 81)',
                        'rgb(113,182,249)',
                        'rgb(16,196,105)',
                        'RGB(255 91 91)'
                    ]
                }
            ]
        };

        var donutOptions = {
            maintainAspectRatio: false,
            responsive: true,
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        new Chart(donutChartCanvas, {
            type: 'doughnut',
            data: donutData,
            options: donutOptions
        });
    </script>
    <!-- *** End Chart JS Donut *** -->
    @*Total Tickets Chart*@
    <script>

        var donutChartCanvas = $('#totalTickets').get(0).getContext('2d');
        var donutData = {
            labels: [
                'Active Tickets',
                'Archived Tickets'
            ],
            datasets: [
                {
                    data: [
        @Model.Tickets!.Where(p => p.Archived == false).Count(),
        @Model.Tickets!.Where(p => p.Archived == true).Count()
                                                                                    ],
                    backgroundColor: [
                        'RGB(113 182 249)',
                        'RGB(255 91 91)'
                    ],
                    borderColor: [
                        'RGB(113 182 249)',
                        'RGB(255 91 91)'
                    ]
                }
            ]
        };

        var donutOptions = {
            maintainAspectRatio: false,
            responsive: true,
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        new Chart(donutChartCanvas, {
            type: 'doughnut',
            data: donutData,
            options: donutOptions
        });
    </script>
    <!-- *** End Chart JS Donut *** -->
    <!--  Plotly Charts  -->
    <!-- Load plotly.js into the DOM -->
    <script src='https://cdn.plot.ly/plotly-2.4.2.min.js'></script>
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/PlotlyBarChart",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                var data = result;

                var layout = { barmode: 'group' };

                Plotly.newPlot('plotlyChart', data, layout);
            },
            failure: function (result) {
                alert(result.d);
            },
            error: function (result) {
                alert(result.d);
            }
        });
    </script>
    }
